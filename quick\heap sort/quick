#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
using namespace std;

int partition(vector<int>& a, int start, int end)
{
    // Выбираем крайний правый элемент в качестве опорного элемента массива
    int pivot = a[end];

    // элементы, меньшие точки поворота, будут перемещены вправо от `pIndex`
    // элементы больше, чем точка поворота, будут сдвинуты влево от `pIndex`
    // равные элементы могут идти в любом направлении
    int pIndex = start;

    // каждый раз, когда мы находим элемент, больший или равный опорному, `pIndex`
    // увеличивается, и этот элемент будет помещен перед опорной точкой.
    for (int i = start; i < end; i++)
    {
        if (a[i] >= pivot)
        {
            swap(a[i], a[pIndex]);
            pIndex++;
        }
    }

    // поменять местами `pIndex` с пивотом
    swap(a[pIndex], a[end]);

    // вернуть `pIndex` (индекс опорного элемента)
    return pIndex;
}

// Процедура быстрой сортировки
void quicksort(vector<int>& a, int start, int end)
{
    // базовое условие
    if (start >= end) {
        return;
    }

    // переставить элементы по оси
    int pivot = partition(a, start, end);

    // повторяем подмассив, содержащий элементы, меньшие опорной точки
    quicksort(a, start, pivot - 1);

    // повторяем подмассив, содержащий элементы, превышающие точку опоры
    quicksort(a, pivot + 1, end);
}

int main()
{
    int n = 5;
    vector<vector<int>> matrix = { {-3, -2, -1, 0, 1},
                                  {-2, -1, 0, 1, 2},
                                  {-1, 0, 2, 1, 3},
                                  {1, 0, 2, 4, 3},
                                  {4, 1, 2, 5, 3} };

    for (int i = 0; i < n; i++) {
        vector<int> diagonal;
        for (int j = 0; j < n - i; j++) {
            diagonal.push_back(matrix[j][i + j]);
        }
        quicksort(diagonal, 0, diagonal.size() - 1);
        for (int j = 0; j < n - i; j++) {
            matrix[j][i + j] = diagonal[j];
        }
    }

    for (int i = 1; i < n; i++) {
        vector<int> diagonal;
        for (int j = 0; j < n - i; j++) {
            diagonal.push_back(matrix[i + j][j]);
        }
        quicksort(diagonal, 0, diagonal.size() - 1);
        for (int j = 0; j < n - i; j++) {
            matrix[i + j][j] = diagonal[j];
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
	return 0;
}
