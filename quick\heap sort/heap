#include <iostream>
#include <string>
#include <fstream>
using namespace std;

ifstream in("input.txt");
ofstream out("output.txt");

struct chel {
    string fam, imya, otch;
    int god, z1, z2, z3, z4, z5, grupp, summz;
};

// Процедура для преобразования в двоичную кучу поддерева с корневым узлом i, что является
// индексом в arr[]. n - размер кучи

void heapify(chel arr[], int n, int i)
{
    int largest = i;
    // Инициализируем наибольший элемент как корень
    int l = 2 * i + 1; // левый = 2*i + 1
    int r = 2 * i + 2; // правый = 2*i + 2

    // Если левый дочерний элемент больше корня
    if (l < n && arr[l].summz > arr[largest].summz)
        largest = l;

    // Если правый дочерний элемент больше, чем самый большой элемент на данный момент
    if (r < n && arr[r].summz > arr[largest].summz)
        largest = r;

    // Если самый большой элемент не корень
    if (largest != i)
    {
        swap(arr[i], arr[largest]);

        // Рекурсивно преобразуем в двоичную кучу затронутое поддерево
        heapify(arr, n, largest);
    }
}

// Основная функция, выполняющая пирамидальную сортировку
void heapSort(chel arr[], int n)
{
    // Построение кучи (перегруппируем массив)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // Один за другим извлекаем элементы из кучи
    for (int i = n - 1; i >= 0; i--)
    {
        // Перемещаем текущий корень в конец
        swap(arr[0], arr[i]);

        // вызываем процедуру heapify на уменьшенной куче
        heapify(arr, i, 0);
    }
}

int main()
{
    chel* x = new chel[6];
    int i = 0;
    while (in.peek() != EOF)
    {
        in >> x[i].grupp >> x[i].fam >> x[i].imya >> x[i].otch >> x[i].god
            >> x[i].z1 >> x[i].z2 >> x[i].z3 >> x[i].z4 >> x[i].z5;
        i++;
    }
    for (int g = 0; g < i; g++)
    {
        x[g].summz = x[g].z1 + x[g].z2 + x[g].z3 + x[g].z4 + x[g].z5;
    }

    heapSort(x, i);

    for (int g = 0; g < i; g++)
    {
        out << x[g].grupp << ' ' << x[g].fam << ' ' << x[g].imya << ' ' << x[g].otch << ' ' << x[g].god
            << ' ' << x[g].z1 << ' ' << x[g].z2 << ' ' << x[g].z3 << ' ' << x[g].z4 << ' ' << x[g].z5 << ' ' << x[g].summz << endl;
    }

    in.close();
    out.close();
}

