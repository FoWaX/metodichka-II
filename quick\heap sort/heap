#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
using namespace std;

void heapify(vector <int>& arr, int n, int i)
{
    int largest = i;
    // Инициализируем наибольший элемент как корень
    int l = 2 * i + 1; // левый = 2*i + 1
    int r = 2 * i + 2; // правый = 2*i + 2

    // Если левый дочерний элемент меньше корня
    if (l < n && arr[l] < arr[largest])
        largest = l;

    // Если правый дочерний элемент меньше, чем самый большой элемент на данный момент
    if (r < n && arr[r] < arr[largest])
        largest = r;

    // Если самый большой элемент не корень
    if (largest != i)
    {
        swap(arr[i], arr[largest]);

        // Рекурсивно преобразуем в двоичную кучу затронутое поддерево
        heapify(arr, n, largest);
    }
}

// Основная функция, выполняющая пирамидальную сортировку
void heapSort(vector <int>& arr, int n)
{
    // Построение кучи (перегруппируем массив)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // Один за другим извлекаем элементы из кучи
    for (int i = n - 1; i >= 0; i--)
    {
        // Перемещаем текущий корень в конец
        swap(arr[0], arr[i]);

        // вызываем процедуру heapify на уменьшенной куче
        heapify(arr, i, 0);
    }
}


int main()
{
    int n = 5;
    vector<vector<int>> matrix = { {-3, -2, -1, 0, 1},
                                  {-2, -1, 0, 1, 2},
                                  {-1, 0, 2, 1, 3},
                                  {1, 0, 2, 4, 3},
                                  {4, 1, 2, 5, 3} };

    for (int i = 0; i < n; i++) {
        vector<int> diagonal;
        for (int j = 0; j < n - i; j++) {
            diagonal.push_back(matrix[j][i + j]);
        }
        heapSort(diagonal, diagonal.size());
        for (int j = 0; j < n - i; j++) {
            matrix[j][i + j] = diagonal[j];
        }
    }

    for (int i = 1; i < n; i++) {
        vector<int> diagonal;
        for (int j = 0; j < n - i; j++) {
            diagonal.push_back(matrix[i + j][j]);
        }
        heapSort(diagonal, diagonal.size());
        for (int j = 0; j < n - i; j++) {
            matrix[i + j][j] = diagonal[j];
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
	return 0;
}
