#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <algorithm>
using namespace std;

class Author {
    struct Work {
        string title;
        string genre;
    };

    string name;
    int birthYear;
    int deathYear;
    vector<Work> works;
public:
    Author(const string& name, int birthYear, int deathYear)
        : name(name), birthYear(birthYear), deathYear(deathYear) {}

    Author()
        : name(" "), birthYear(0), deathYear(0) {}
    string getName() const {
        return name;
    }

    int getBirthYear() const {
        return birthYear;
    }

    int getDeathYear() const {
        return deathYear;
    }

    void setBirthYear(int newBirthYear) {
        birthYear = newBirthYear;
    }

    void setDeathYear(int newDeathYear) {
        deathYear = newDeathYear;
    }

    void addWork(const string& title, const string& genre) {
        works.push_back({ title, genre });
    }

    void removeWork(const string& title) {
        works.erase(remove_if(works.begin(), works.end(),
            [&title](const Work& work) { return work.title == title; }),
            works.end());
    }

    void updateWork(const string& oldTitle, const string& newTitle, const string& newGenre) {
        auto it = find_if(works.begin(), works.end(),
            [&oldTitle](const Work& work) { return work.title == oldTitle; });
        if (it != works.end()) {
            it->title = newTitle;
            it->genre = newGenre;
        }
    }

    vector<string> getWorksByAuthor() const {
        vector<string> titles;
        for (const auto& work : works) {
            titles.push_back(work.title);
        }
        return titles;
    }

    bool hasWorkInGenre(const string& genre) const {
        return any_of(works.begin(), works.end(),
            [&](const Work& work) { return work.genre == genre; });
    }

};

class Library {
    map<string, Author> authors;
public:
    void addAuthor(const string& name, int birthYear, int deathYear) {
        authors[name] = Author(name, birthYear, deathYear);
    }

    void removeAuthor(const string& name) {
        authors.erase(name);
    }

    void updateAuthorBirthYear(const string& authorName, int newBirthYear) {
        if (authors.find(authorName) != authors.end()) {
            authors[authorName].setBirthYear(newBirthYear);
        }
    }

    void updateAuthorDeathYear(const string& authorName, int newDeathYear) {
        if (authors.find(authorName) != authors.end()) {
            authors[authorName].setDeathYear(newDeathYear);
        }
    }

    void printLibraryInfo() const {
        for (const auto& authorPair : authors) {
            const Author& author = authorPair.second;
            cout << "author " << author.getName() << " (" << author.getBirthYear() << "-" << author.getDeathYear() << ")\n";
            cout << "proisvedenia \n";
            for (const auto& work : author.getWorksByAuthor()) {
                cout << "  - " << work << "\n";
            }
            cout << endl;
        }
    }
    void addWork(const string& authorName, const string& title, const string& genre) {
        if (authors.find(authorName) != authors.end()) {
            authors[authorName].addWork(title, genre);
        }
    }

    void removeWork(const string& authorName, const string& title) {
        if (authors.find(authorName) != authors.end()) {
            authors[authorName].removeWork(title);
        }
    }

    void updateWork(const string& authorName, const string& oldTitle, const string& newTitle, const string& newGenre) {
        if (authors.find(authorName) != authors.end()) {
            authors[authorName].updateWork(oldTitle, newTitle, newGenre);
        }
    }

    int getBirthYearByAuthor(const string& authorName) const {
        if (authors.find(authorName) != authors.end()) {
            return authors.at(authorName).getBirthYear();
        }
        return {};
    }

    int getDeathYearByAuthor(const string& authorName) const {
        if (authors.find(authorName) != authors.end()) {
            return authors.at(authorName).getDeathYear();
        }
        return {};
    }

    vector<string> getWorksByAuthor(const string& authorName) const {
        if (authors.find(authorName) != authors.end()) {
            return authors.at(authorName).getWorksByAuthor();
        }
        return {};
    }

    void removeAuthorsWithoutGenre(const string& genre) {
        for (auto it = authors.begin(); it != authors.end();) {
            if (!it->second.hasWorkInGenre(genre)) {
                it = authors.erase(it);
            }
            else {
                ++it;
            }
        }
    }
};

int main()
{
    vector<string> imena;
    Library library;
    string im_fam_avtora, ima, fam, nazv_raboti,genre;
    int godbirth, goddeath;
    cout << "vvedite kol-vo avtorov, kotorih xotite dobadit: ";
    int n,n1;
    cin >> n;
    cout << endl;
    for (int i = 0; i < n; i++)
    {
        cout << "vvedite ima avtora \n";
        cin >> ima;
        cout << "vvedite fam avtora \n";
        cin >> fam;
        im_fam_avtora = ima + " " + fam;
        imena.push_back(im_fam_avtora);
        cout << endl;
        cout << "vvedite goda shisni \n";
        cin >> godbirth >> goddeath;
        library.addAuthor(im_fam_avtora, godbirth, goddeath);
        cout << endl;
        cout << "vvedite kol-vo rabot kotorie xotite dobavit: ";
        cin >> n1;
        cout << endl;
        for (int j = 0; j < n1; j++)
        {
            cout << "vvedite nazvanie raboti, a posle nee # \n";
            getline(cin, nazv_raboti,'#');
            cout << "vvedite ganr \n";
            cin >> genre;
            library.addWork(im_fam_avtora, nazv_raboti, genre);
            cout << endl;
        }
    }

    for (int i = 0; i < imena.size(); i++)
    {
        vector<string> Works = library.getWorksByAuthor(imena[i]);
        for (const auto& work : Works) {
            cout << work << endl;
        }
        cout << endl;
    }

    library.printLibraryInfo();

    string del_genre;
    cout << "vvedite nazvanie ganra, avtorov bez kotorogo xotite udalit \n";
    cin >> del_genre;

    library.removeAuthorsWithoutGenre(del_genre);
    
    cout << "posle udalenia avtorov bes ganra " << del_genre << endl;

    for (int i = 0; i < imena.size(); i++)
    {
        vector<string> Works1 = library.getWorksByAuthor(imena[i]);
        for (const auto& work : Works1) {
            cout << work << endl;
        }
        cout << endl;
    }

    cout << endl;

    library.printLibraryInfo();

    cout << " vvedite ima avtora, godi shisni kotorogo xotite utochnit" << endl;
    cin >> im_fam_avtora;
    cout << endl;

    cout << im_fam_avtora << ' ' << library.getBirthYearByAuthor(im_fam_avtora) << " - " << library.getDeathYearByAuthor(im_fam_avtora);

    return 0;
}
